#!/bin/bash

# Set the local to avoid translation of ifconfig output
export LC_ALL=C

exit_error() {
    [ -f $lacie_uboot_script ] && rm $lacie_uboot_script
    for file in $installed_file; do
        [ -f $file ] && rm -f $file
        [ -d $file ] && rm -Rf $file
    done
    exit
}

show_usage () {
    cat << EOF
Usage: $0 [OPTIONS] <FILE_PATH>
Update a LaCie NAS system with the given file.
If your file ends with .capsule, we will update the system.
If your file ends with .bin or .kwb, we will update U-Boot.

    -h        show this message
    -t        Path to the root of your TFTP server
    -m        MAC address of the product to flash
    -I        IFACE, specify your network inteface if not default (eth0)
    -i        To specify the IP address to assign to the device.
    -d        show debug message

EOF
    exit 1
}

parse_options() {
    while getopts "ht:m:I:i:d" option; do
        case $option in
            h)
                show_usage
                exit 0
                ;;
            t)
                TFTP_ROOT=$OPTARG
                ;;
            m)
                MAC=$OPTARG
                ;;
            I)
                IFACE=$OPTARG
                ;;
            i)
                RAND_IP=$OPTARG
                ;;
            d)
                DEBUG="-D"
                ;;
        esac
    done
}

prepare_lacie_uboot() {
    # Prepare lacie_uboot script
    local type=$1
    local lacie_uboot_script=$2

    if [ $type == "bin" ] || [ $type == "kwb" ] ;then
    cat > $lacie_uboot_script <<- EOF
#!$lacie_uboot_path
setenv serverip $MY_IP
setenv ipaddr $RAND_IP
bubt $filename
y
reset

EOF
    else
    cat > $lacie_uboot_script <<- EOF
#!$lacie_uboot_path
setenv serverip $MY_IP
setenv ipaddr $RAND_IP
tftp 0x800000 uImage
set bootargs console=ttyS0,115200 tftp_server='$MY_IP' static_addr='$RAND_IP'
bootm

EOF
    fi
    chmod +x $lacie_uboot_script
}

trap exit_error INT TERM
lacie_uboot_path=$(which lacie-uboot-shell)
[ -z "$lacie_uboot_path" ] && echo "lacie-uboot-shell is not installed." && exit 1
lacie_uboot_script=$(mktemp)

if ! which realpath &> /dev/null; then
    echo "Error: realpath not found in your path"
    echo "Please, apt-get install realpath"
    exit 0
fi

IFACE="eth0"
DEBUG="-p"
TFTP_ROOT="$(pwd)"
parse_options "${@}"
shift $((OPTIND - 1))
file=$1
if [ -z "$file" ]; then
    show_usage
    exit 1
fi
filename=$(basename $file)
TFTP_ROOT=$(realpath $TFTP_ROOT)
if [ ! -d "$TFTP_ROOT" ]; then
    echo "$TFTP_ROOT does not exists."
    show_usage
    exit 1
fi

if [ "$(whoami)" != "root" ]; then
    echo "You should be root to execute this script"
    exit 1
fi

if [ "$(uname)" = "Darwin" ];then
    MY_IP=$(ifconfig $IFACE | grep 'inet ' | cut -d' ' -f2)
    [ -z "$RAND_IP" ] && echo "You need to specify an IP to assign to the device." && exit 1
else
    MY_IP=$(ifconfig $IFACE | grep 'inet ' | cut -d: -f2 | awk '{ print $1}')
fi
[ -z "$MY_IP" ] && echo "Are you sure $IFACE is correct ?" && exit 1

if [ "$(uname)" != "Darwin" ];then
    MY_NETMASK=$(ifconfig $IFACE | grep 'Mask:' | awk -F: '{print $NF}')
    MY_MAC=$(ifconfig $IFACE | grep 'HWaddr' | awk -F' ' '{print $NF}')
    if [ -z "$RAND_IP" ]; then
        RAND_IP=$(python -c 'import lacie-uboot.network; print lacie-uboot.network.find_free_ip("'$IFACE'", "'$MY_IP'","'$MY_MAC'", "'$MY_NETMASK'")')
    fi
fi

file_format=$(echo ${file##*.})
installed_file=""
case $file_format in
    "capsule")
        # Decapsule the given file into temporary directory
        temp_file=$(mktemp)
        sed '1,/<\/Capsule>/d' $file > $temp_file
        for file in $(tar tf $temp_file); do
            [ $file == "./" ] && continue
            installed_file="$installed_file "$file
        done
        tar xf $temp_file -C $TFTP_ROOT
        if [ $? -ne 0 ]; then
            exit 1
        fi
        rm $temp_file
        ;;
    "bin" | "kwb")
        # Move U-Boot into ptftpd directory
        cp $file $TFTP_ROOT
        installed_file="$file"
        ;;
    *)
        show_usage
        echo "File extension not available. Only .capsule, .bin or .kwb"
        ;;
esac

prepare_lacie_uboot $file_format $lacie_uboot_script

# Exec lacie_uboot script
$lacie_uboot_script -m $MAC -i $IFACE --ip $RAND_IP -w $DEBUG

[ -f $lacie_uboot_script ] && rm $lacie_uboot_script
for file in $installed_file; do
    [ -f $file ] && rm -f $file
    [ -d $file ] && rm -Rf $file
done

